/**
 * This template for single thread, WITHIN aggregation function query
 * Currently do not support complex aggregation like: count(f)+1, sum(f1)+sum(f2)....
 */
 
int selectLevel = 0;
int fetchLevel = 0;
int nextLevel = 0;
boolean hasMoreSlices = true;

//inSlice declaration
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
#if ($symbol.isTypeInt())
int $symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
double $symbol.getJavaName() = 0.0;
#elseif ($symbol.isTypeBool())
boolean $symbol.getJavaName() = false;
#elseif ($symbol.isTypeString())
String $symbol.getJavaName() = null;
#end
boolean is_$symbol.getJavaName()_null = true;
#end
#end

class OutSlice
{
	public int missing_count = $query.getAggregationFunctions().size();
	public int select_level;
	
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.isTypeInt())
	public int $exp.getJavaName() = 0;
#elseif ($exp.isTypeFloat())
	public double $exp.getJavaName() = 0.0;
#elseif ($exp.isTypeBool())
	public boolean $exp.getJavaName() = false;
#elseif ($exp.isTypeString())
	public String $exp.getJavaName() = null;
#end
	public int $exp.getJavaName()_state = 3; //0~OK,1~NULL,2~NOTEMITTED, 3~MISSING (for aggregation)
#end
	//linked list
	public OutSlice next;
	public OutSlice previous;
	
	public void emit(Tablet resultTablet)
	{
		//emit slice here, for now print to stdout but need append to resultTablet
#foreach ($exp1 in $query.getSelectExpressions())
		if (this.$exp1.getJavaName()_state == 0) System.out.print(this.$exp1.getJavaName()+"\t\t");
		else if (this.$exp1.getJavaName()_state == 1) System.out.print("NULL\t\t");
		else if (this.$exp1.getJavaName()_state == 2) System.out.print("N/A\t\t");
#end
		System.out.println();
	}
};
//linked list for output slice pool
OutSlice first = new OutSlice();
first.next = null;
first.previous = null;
OutSlice last = first;

#foreach ($exp in $query.getSelectExpressions())
boolean input_changed_$exp.getJavaName() = false;
#end

//aggregation function variables\
#foreach ($func in $query.getAggregationFunctions())
#if ($func.isTypeInt())
int $func.getSymbol().getJavaName()_$func.hashCode() = 0;
#elseif ($exp.isTypeFloat())
double $func.getSymbol().getJavaName()_$func.hashCode()  = 0.0;
#elseif ($exp.isTypeBool())
boolean $func.getSymbol().getJavaName()_$func.hashCode() = false;
#elseif ($exp.isTypeString())
String $func.getSymbol().getJavaName()_$func.hashCode() = null;
#end
OutSlice $func.getSymbol().getJavaName()_marker = first;
#end 

ColumnReader reader = null;

while (hasMoreSlices)
{
#foreach ($exp in $query.getSelectExpressions())
	input_changed_$exp.getJavaName() = false;
#end
	//fetch inSlice from sourceTablet
	nextLevel = 0;
	hasMoreSlices = false;
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
	reader = (ColumnReader)sourceTablet.getColumns().get("$symbol.getSymbol()");
	if(reader.nextRepetitionLevel() >= fetchLevel)
	{
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getSymbols().contains($symbol))
		input_changed_$exp.getJavaName() = true;
#end
#end	
		boolean isLastInReader = reader.next();
		hasMoreSlices = hasMoreSlices || isLastInReader;
		
		if(reader.isNull())
		{
			is_$symbol.getJavaName()_null = true;
#if ($symbol.isTypeInt())
			$symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
			$symbol.getJavaName() = 0.0;
#elseif ($symbol.isTypeBool())
			$symbol.getJavaName() = false;
#elseif ($symbol.isTypeString())
			$symbol.getJavaName() = "";
#end			
		}
		else
		{
			is_$symbol.getJavaName()_null = false;
#if ($symbol.isTypeInt())
			$symbol.getJavaName() = reader.getIntValue();
#elseif ($symbol.isTypeFloat())
			//$symbol.getJavaName() = reader.getFloatValue();
#elseif ($symbol.isTypeBool())
			//$symbol.getJavaName() = reader.getIntValue();
#elseif ($symbol.isTypeString())
			$symbol.getJavaName() = reader.getStringValue();
#end
		}
	}
	nextLevel = Math.max(nextLevel, reader.nextRepetitionLevel());
#end
#end	

	fetchLevel = nextLevel;
	//System.out.println(fetchLevel + "\t"+ selectLevel);
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
#set ($symbol=$exp.getSymbols().get(0))		
	if (selectLevel <= $exp.getWithinLevel() || (!hasMoreSlices)) //check within level
	{
		//emit aggregation value
		OutSlice s = $symbol.getJavaName()_marker;
		s = s.next;
		if (s!=null)
		{
			s.$exp.getJavaName() = $symbol.getJavaName()_$exp.getRoot().hashCode();
			s.missing_count--;
			s.$exp.getJavaName()_state = 0; //ok state
			if ((s.missing_count==0))
			{
				s.emit(null);
				first.next = s.next;
			}
			s = s.next;
		}
		while (s!=null) //from marker to the end of slice pool
		{
			s.$exp.getJavaName() = $symbol.getJavaName()_$exp.getRoot().hashCode();
			s.missing_count--;
			s.$exp.getJavaName()_state = 2; //N/A state
			if ((s.missing_count==0))
			{
				s.emit(null);
				first.next = s.next;
			}
			s = s.next;
		}
		$symbol.getJavaName()_marker = last;
#if ($exp.isTypeInt())
		$symbol.getJavaName()_$exp.getRoot().hashCode() = 0;
#elseif ($exp.isTypeFloat())
		$symbol.getJavaName()_$exp.getRoot().hashCode() = 0.0;
#elseif ($exp.isTypeBool())
		$symbol.getJavaName()_$exp.getRoot().hashCode() = false;
#elseif ($exp.isTypeString())
		$symbol.getJavaName()_$exp.getRoot().hashCode() = "";
#end			
	}			
#end
#end
	
	if (!hasMoreSlices) break;

#if ($query.getFilter())
	if ($query.getFilter().getRoot().generateCode())
	{
#end
		OutSlice outSlice = new OutSlice(); //allocate new output slice
		//calculate expressions for outSlice
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
		if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName())
		{
#set ($symbol=$exp.getSymbols().get(0))		
			if (!is_$symbol.getJavaName()_null)
			{
				$exp.getRoot().generateCode();//update agg value
			}
		}
#else
		if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName())
		{
			if(#foreach ($symbol in $exp.getSymbols()) is_$symbol.getJavaName()_null && #end true) //all input are null
			{
				outSlice.$exp.getJavaName()_state = 1; //null state
			}
			else
			{ 
				outSlice.$exp.getJavaName() = $exp.getRoot().generateCode();
				outSlice.$exp.getJavaName()_state = 0; //ok state
			}	
		}
		else
		{
			outSlice.$exp.getJavaName()_state = 2; //N/A state
		}
#end 
#end	
		outSlice.select_level = selectLevel;
		last.next = outSlice;
		outSlice.previous = last;
		outSlice.next = null;
		last = outSlice;	
		selectLevel = fetchLevel;

#if ($query.getFilter())	
	} 
	else 
	{
		if(selectLevel > fetchLevel) selectLevel = fetchLevel;
	}
#end
}