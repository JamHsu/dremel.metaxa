/**
 * This template for single thread, no aggregation function query
 */
 
int selectLevel = 0;
int fetchLevel = 0;
int nextLevel = 0;
boolean hasMoreSlices = true;

//inSlice declaration
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
#if ($symbol.isTypeInt())
int $symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
double $symbol.getJavaName() = 0.0;
#elseif ($symbol.isTypeBool())
boolean $symbol.getJavaName() = false;
#elseif ($symbol.isTypeString())
String $symbol.getJavaName() = null;
#end
boolean is_$symbol.getJavaName()_null = true;
#end
#end

//outSlice declaration
#foreach ($exp in $query.getSelectExpressions())
#set($isCol = 0)
#if ($exp.getAlias())
#set($symbol=$query.getSymbolTable().get($exp.getAlias()))
#if($symbol && $symbol.isColumnID())
#set($isCol = 1)
#end
#end
#if($isCol == 0)
#if ($exp.isTypeInt())
int $exp.getJavaName() = 0;
#elseif ($exp.isTypeFloat())
double $exp.getJavaName() = 0.0;
#elseif ($exp.isTypeBool())
boolean $exp.getJavaName() = false;
#elseif ($exp.isTypeString())
String $exp.getJavaName() = null;
#end
#end
boolean input_changed_$exp.getJavaName() = false;
#end

ColumnReader reader = null;

#foreach ($exp in $query.getSelectExpressions())
ColumnWriter $exp.getJavaName()_writer = new ColumnWriterImpl(resultSchema.getColumnMetaData("$exp.getJavaName()"));
byte $exp.getJavaName()_def = resultSchema.getColumnMetaData("$exp.getJavaName()").getMaxDefinitionLevel();
#end
ColumnWriter writer = null;

while (hasMoreSlices)
{
	//fetch inSlice from sourceTablet
	nextLevel = 0;
	hasMoreSlices = false;
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
	reader = (ColumnReader)sourceTablet.getColumns().get("$symbol.getSymbol()");
	if(reader.nextRepetitionLevel() >= fetchLevel)
	{
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getSymbols().contains($symbol))
		input_changed_$exp.getJavaName() = true;
#end
#end	
		boolean isLastInReader = reader.next();
		hasMoreSlices = hasMoreSlices || isLastInReader;
		if(reader.isNull())
		{
			is_$symbol.getJavaName()_null = true;
#if ($symbol.isTypeInt())
			$symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
			$symbol.getJavaName() = 0.0;
#elseif ($symbol.isTypeBool())
			$symbol.getJavaName() = false;
#elseif ($symbol.isTypeString())
			$symbol.getJavaName() = "";
#end			
		}else
		{
			is_$symbol.getJavaName()_null = false;
#if ($symbol.isTypeInt())
			$symbol.getJavaName() = reader.getIntValue();
#elseif ($symbol.isTypeFloat())
			//$symbol.getJavaName() = reader.getFloatValue();
#elseif ($symbol.isTypeBool())
			//$symbol.getJavaName() = reader.getIntValue();
#elseif ($symbol.isTypeString())
			$symbol.getJavaName() = reader.getStringValue();
#end
		}
	}
	nextLevel = Math.max(nextLevel, reader.nextRepetitionLevel());
#end
#end	

	fetchLevel = nextLevel;
	//System.out.println(selectLevel + "\t" + fetchLevel);
	
	if (!hasMoreSlices) break; //no more slice, exit

#if ($query.getFilter())
	if ($query.getFilter().getRoot().generateCode())
	{
#end
		//calculate expressions for outSlice
#foreach ($exp in $query.getSelectExpressions())
		writer = $exp.getJavaName()_writer;		
#if ($exp.getSymbols().size()>0)
		if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName())
		{
			if(#foreach ($symbol in $exp.getSymbols()) is_$symbol.getJavaName()_null && #end true) //all input are null
			{
				writer.addIntDataTriple(0,ColumnReader.NULL, (byte)selectLevel, (byte)($exp.getJavaName()_def-1)); //need verify def level
			}
			else
			{ 
				$exp.getJavaName() = $exp.getRoot().generateCode();
				writer.addIntDataTriple($exp.getJavaName(),ColumnReader.NOT_NULL, (byte)selectLevel, $exp.getJavaName()_def);
			}
			input_changed_$exp.getJavaName() = false;	
		}
#else
		if (selectLevel == 0)
		{
			$exp.getJavaName() = $exp.getRoot().generateCode();
			writer.addIntDataTriple($exp.getJavaName(),ColumnReader.NOT_NULL, (byte)selectLevel, $exp.getJavaName()_def);
		}
#end		
#end		
		
		//System.out.println();				
		selectLevel = fetchLevel;

#if ($query.getFilter())	
	} 
	else 
	{
		if(selectLevel > fetchLevel) selectLevel = fetchLevel;
	}
#end
}

#foreach ($exp in $query.getSelectExpressions())
writer = $exp.getJavaName()_writer;writer.close();
#end