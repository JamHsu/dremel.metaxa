/**
 * This template for single thread, WITHIN aggregation function query
 * Currently do not support complex aggregation like: count(f)+1, sum(f1)+sum(f2)....
 * This template using SlicePool to store output slices and do aggregation expression
 */
 
int selectLevel = 0;
int fetchLevel = 0;
int nextLevel = 0;
boolean hasMoreSlices = true;
int slice_size = 0;

//inSlice declaration
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
#if ($symbol.isTypeInt())
int $symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
double $symbol.getJavaName() = 0.0;
#elseif ($symbol.isTypeBool())
boolean $symbol.getJavaName() = false;
#elseif ($symbol.isTypeString())
String $symbol.getJavaName() = null;
#end
boolean is_$symbol.getJavaName()_null = true;
#end
#end

//outSlice declaration
#foreach ($exp in $query.getSelectExpressions())
#set($isCol = 0)
#if ($exp.getAlias())
#set($symbol=$query.getSymbolTable().get($exp.getAlias()))
#if($symbol && $symbol.isColumnID())
#set($isCol = 1)
#end
#end
#if($isCol == 0)
#if ($exp.isTypeInt())
int $exp.getJavaName() = 0;
#elseif ($exp.isTypeFloat())
double $exp.getJavaName() = 0.0;
#elseif ($exp.isTypeBool())
boolean $exp.getJavaName() = false;
#elseif ($exp.isTypeString())
String $exp.getJavaName() = null;
#end
#end
boolean input_changed_$exp.getJavaName() = false;
int $exp.getJavaName()_state = 3;

#end

//aggregation function variables
#foreach ($func in $query.getAggregationFunctions())
#if ($func.isTypeInt())
int $func.getSymbol().getJavaName()_$func.hashCode() = 0;
#elseif ($exp.isTypeFloat())
double $func.getSymbol().getJavaName()_$func.hashCode()  = 0.0;
#elseif ($exp.isTypeBool())
boolean $func.getSymbol().getJavaName()_$func.hashCode() = false;
#elseif ($exp.isTypeString())
String $func.getSymbol().getJavaName()_$func.hashCode() = null;
#end
int $func.getSymbol().getJavaName()_slice_marker = 0;
int $func.getSymbol().getJavaName()_field_marker = 0;

#end 

#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
ColumnReader $symbol.getJavaName()_reader = (ColumnReader)sourceTablet.getColumns().get("$symbol.getSymbol()");
#end
#end
ColumnReader reader = null;

while (hasMoreSlices)
{
	//fetch inSlice from sourceTablet
	nextLevel = 0;
	hasMoreSlices = false;
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
	reader = $symbol.getJavaName()_reader;
	if(reader.nextRepetitionLevel() >= fetchLevel)
	{
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getSymbols().contains($symbol))
		input_changed_$exp.getJavaName() = true;
#end
#end	
		boolean isLastInReader = reader.next();
		hasMoreSlices = hasMoreSlices || isLastInReader;
		
		if(reader.isNull())
		{
			is_$symbol.getJavaName()_null = true;
#if ($symbol.isTypeInt())
			$symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
			$symbol.getJavaName() = 0.0;
#elseif ($symbol.isTypeBool())
			$symbol.getJavaName() = false;
#elseif ($symbol.isTypeString())
			$symbol.getJavaName() = "";
#end			
		}
		else
		{
			is_$symbol.getJavaName()_null = false;
#if ($symbol.isTypeInt())
			$symbol.getJavaName() = reader.getIntValue();
#elseif ($symbol.isTypeFloat())
			//$symbol.getJavaName() = reader.getFloatValue();
#elseif ($symbol.isTypeBool())
			//$symbol.getJavaName() = reader.getIntValue();
#elseif ($symbol.isTypeString())
			$symbol.getJavaName() = reader.getStringValue();
#end
		}
	}
	nextLevel = Math.max(nextLevel, reader.nextRepetitionLevel());
#end
#end	

	fetchLevel = nextLevel;
//TODO: emit agg value here
	if (!hasMoreSlices) break;

#if ($query.getFilter())
	if ($query.getFilter().getRoot().generateCode())
	{
#end
		//calculate expressions for outSlice
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
		if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName()) //agg expression
		{
#set ($symbol=$exp.getSymbols().get(0))		
			if (!is_$symbol.getJavaName()_null)
			{
				$exp.getRoot().generateCode();//update agg value
			}
			input_changed_$exp.getJavaName() = false;
		}
#else
#if ($exp.getSymbols().size()>0)
		if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName()) //non agg expression
		{
			if(#foreach ($symbol in $exp.getSymbols()) is_$symbol.getJavaName()_null && #end true) //all input are null
			{
				$exp.getJavaName()_state = 1; //null state
			}
			else
			{ 
				$exp.getJavaName() = $exp.getRoot().generateCode();
				$exp.getJavaName()_state = 0; //ok state
			}
			input_changed_$exp.getJavaName() = false;
		}
		else
		{
			$exp.getJavaName()_state = 2; //N/A state
		}
#else
		if (selectLevel == 0) //expression with constant only will be at level 0
		{
			$exp.getJavaName() = $exp.getRoot().generateCode();
			$exp.getJavaName()_state = 0; //ok state
		}
		else
		{
			$exp.getJavaName()_state = 2; //N/A state
		}
#end		
#end 
#end	
		//outSlice.select_level = selectLevel;
		//last.next = outSlice;
		//outSlice.previous = last;
		//outSlice.next = null;
		//last = outSlice;	
		selectLevel = fetchLevel;
#if ($query.getFilter())	
	} 
	else 
	{
		if(selectLevel > fetchLevel) selectLevel = fetchLevel;
		
	}
#end
}