long startTime=System.currentTimeMillis();
final SlicePool2 inPool = new SlicePool2(64*1024);
final SlicePool2 outPool = new SlicePool2(64*1024);

Runnable TabletReader = new Runnable() {
public void run() {
	System.out.println("BEGIN READER");
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
	ColumnReader $symbol.getJavaName()_reader = (ColumnReader)sourceTablet.getColumns().get("$symbol.getSymbol()");
#end
#end
	ColumnReader reader = null;
	
	boolean hasMoreSlices = true;
	byte[] sliceBuffer = new byte[1024]; //buffer for slice encoding
	sliceBuffer[0] = 0;//missing count is always zero 
	int fetchLevel = 0;
	int nextLevel = 0;
	int position = 0;
			
	while (hasMoreSlices)
	{
		//fetch inSlice from sourceTablet
		nextLevel = 0;
		hasMoreSlices = false;
		position = 2;//two first bytes are missing count and level
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
		reader = $symbol.getJavaName()_reader;
		if(reader.nextRepetitionLevel() >= fetchLevel)
		{
			boolean isLastInReader = reader.next();
			hasMoreSlices = hasMoreSlices || isLastInReader;
			
			if(reader.isNull())
			{
				sliceBuffer[position++] = 1; //state=1 is NULL value
			}
			else
			{
				sliceBuffer[position++] = 0; //state=0 ~ has value
				//write value
#if ($symbol.isTypeInt())
				int val = reader.getIntValue();
				sliceBuffer[position++] = (byte)(val >> 24);
				sliceBuffer[position++] = (byte)(val >> 16);
				sliceBuffer[position++] = (byte)(val >> 8);
				sliceBuffer[position++] = (byte)(val);
#elseif ($symbol.isTypeFloat())
#elseif ($symbol.isTypeBool())
#elseif ($symbol.isTypeString())
#end			 
			}
		}
		else
		{
			sliceBuffer[position++] = 2; //state=2 is N/A value
		}
		nextLevel = Math.max(nextLevel, reader.nextRepetitionLevel());
#end
#end	
		if (!hasMoreSlices) break;
		fetchLevel = nextLevel;
		sliceBuffer[1]=(byte)fetchLevel; //update level to buffer
		
		while (inPool.writeSlice(sliceBuffer, position) == -1){}
	}//while
	inPool.endPool();
	System.out.println("END READER");
}//run
};

Runnable TabletWriter = new Runnable() {
public void run() {
	System.out.println("BEGIN WRITER");
#foreach ($exp in $query.getSelectExpressions())
	ColumnWriter $exp.getJavaName()_writer = new ColumnWriterImpl(resultSchema.getColumnMetaData("$exp.getJavaName()"));
	byte $exp.getJavaName()_def = resultSchema.getColumnMetaData("$exp.getJavaName()").getMaxDefinitionLevel();
#end
	ColumnWriter writer = null;
	
	while (outPool.hasMore())
	{
		if (outPool.prepareSliceRead())
		{
			byte level = outPool.getLevel();
			byte state = 0;
			int intVal = 0;
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.isTypeInt())
			intVal = outPool.readInt();
			state = outPool.getLastState();
			writer = $exp.getJavaName()_writer;
			if (state == 0) 
			{
				writer.addIntDataTriple(intVal,ColumnReader.NOT_NULL, level, $exp.getJavaName()_def);
			}
#elseif ($exp.isTypeFloat())
#elseif ($exp.isTypeBool())
#elseif ($exp.isTypeString())
#end
			else if (state == 1)
			{
				writer.addIntDataTriple(0,ColumnReader.NULL, level, (byte)($exp.getJavaName()_def-1)); //need verify def level
			}/**/
#end
			outPool.endSliceRead();
		}//if
	}//while
#foreach ($exp in $query.getSelectExpressions())
	writer = $exp.getJavaName()_writer;writer.close();
#end
	System.out.println("END WRITER");
}//run
};

Runnable QueryExecutor = new Runnable() {
public void run() {
	System.out.println("BEGIN EXECUTOR");
	int selectLevel = 0;
	byte missingCount = $query.getAggregationFunctions().size();
	
//inSlice declaration
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())
#if ($symbol.isTypeInt())
	int $symbol.getJavaName() = 0;
#elseif ($symbol.isTypeFloat())
#elseif ($symbol.isTypeBool())
#elseif ($symbol.isTypeString())
#end
	boolean is_$symbol.getJavaName()_null = true;
#end
#end

//outSlice declaration
#foreach ($exp in $query.getSelectExpressions())
#set($isCol = 0)
#if ($exp.getAlias())
#set($symbol=$query.getSymbolTable().get($exp.getAlias()))
#if($symbol && $symbol.isColumnID())
#set($isCol = 1)
#end
#end
#if($isCol == 0)
#if ($exp.isTypeInt())
	int $exp.getJavaName() = 0;
#elseif ($exp.isTypeFloat())
#elseif ($exp.isTypeBool())
#elseif ($exp.isTypeString())
#end
#end
	boolean input_changed_$exp.getJavaName() = false;
	int $exp.getJavaName()_state = 3;

#end

//aggregation function variables
#foreach ($func in $query.getAggregationFunctions())
#if ($func.isTypeInt())
	int $func.getSymbol().getJavaName()_$func.hashCode() = 0;
#elseif ($exp.isTypeFloat())
	double $func.getSymbol().getJavaName()_$func.hashCode()  = 0.0;
#elseif ($exp.isTypeBool())
	boolean $func.getSymbol().getJavaName()_$func.hashCode() = false;
#elseif ($exp.isTypeString())
	String $func.getSymbol().getJavaName()_$func.hashCode() = null;
#end
	int $func.getSymbol().getJavaName()_slice_marker = -1; //is negative for first time 
	int $func.getSymbol().getJavaName()_field_marker = 0;

#end 

	byte[] sliceBuffer = new byte[1024];
	int updatePosition = 0;
	int slicePosition = 0;
	int fetchLevel = 0;

	while (inPool.hasMore())
	{
		if (inPool.prepareSliceRead())
		{
			fetchLevel = inPool.getLevel();
			byte state = 0;
			int intVal = 0;
#foreach ($symbol in $query.getSymbolTable().values())
#if ($symbol.isColumnID())

#if ($symbol.isTypeInt())
			intVal = inPool.readInt();
			state = inPool.getLastState();
			if (state!=2)
			{
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getSymbols().contains($symbol))
				input_changed_$exp.getJavaName() = true;
#end
#end
			}
			
			if (state == 0)
			{
				is_$symbol.getJavaName()_null = false;
				$symbol.getJavaName() = intVal;
			}
			else if (state == 1) //NULL
			{
				is_$symbol.getJavaName()_null = true;
				$symbol.getJavaName() = 0;
			}
#elseif ($symbol.isTypeFloat())
#elseif ($symbol.isTypeBool())
#elseif ($symbol.isTypeString())
#end

#end
#end
			inPool.endSliceRead();
/***********************************************************************************************/			
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
#set ($symbol=$exp.getSymbols().get(0))		
		if (selectLevel <= $exp.getWithinLevel()) //emit agg values if condition matched
		{
			if ($symbol.getJavaName()_slice_marker >=0 )
			{
#if ($exp.isTypeInt())		
				outPool.updateIntAggValue($symbol.getJavaName()_slice_marker,$symbol.getJavaName()_field_marker,$symbol.getJavaName()_$exp.getRoot().hashCode()); //update int aggval
				$symbol.getJavaName()_$exp.getRoot().hashCode() = 0;
#elseif ($exp.isTypeFloat())
#end
			}
			else missingCount--;
			$symbol.getJavaName()_slice_marker = -1;
			$exp.getJavaName()_state = 3; //change to new within scope
			missingCount++;
		}
#end
#end
#if ($query.getFilter())
		if ($query.getFilter().getRoot().generateCode())
		{
#end
			//calculate expressions for outSlice
			sliceBuffer[0] = missingCount; //first byte is missingCount
			sliceBuffer[1] = ((byte)selectLevel); //second byte is selectLevel
			updatePosition = 2;
		
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
			if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName()) //agg expression
			{
#set ($symbol=$exp.getSymbols().get(0))		
				if (!is_$symbol.getJavaName()_null)
				{
					$exp.getRoot().generateCode();//update agg value
				}
				input_changed_$exp.getJavaName() = false;
			}
			if ($exp.getJavaName()_state == 3) //the first slice of scope
			{
				sliceBuffer[updatePosition++] = 0;
				$symbol.getJavaName()_field_marker = updatePosition;
#if ($exp.isTypeInt())		
				updatePosition += 4;
#elseif ($exp.isTypeFloat())
#end
				missingCount--;
			}
			else
			{
				sliceBuffer[updatePosition++] = 2;
			}
#else
#if ($exp.getSymbols().size()>0)
			if (selectLevel <= $exp.getRepetitionLevel() && input_changed_$exp.getJavaName()) //non agg expression
			{
				if(#foreach ($symbol in $exp.getSymbols()) is_$symbol.getJavaName()_null && #end true) //all input are null
				{
					$exp.getJavaName()_state = 1; //null state
					sliceBuffer[updatePosition++] = 1;
				}
				else
				{ 
					$exp.getJavaName() = $exp.getRoot().generateCode();
					$exp.getJavaName()_state = 0; //ok state
					sliceBuffer[updatePosition++] = 0;
#if ($exp.isTypeInt())
					sliceBuffer[updatePosition++] = (byte)($exp.getJavaName() >> 24);
					sliceBuffer[updatePosition++] = (byte)($exp.getJavaName() >> 16);
					sliceBuffer[updatePosition++] = (byte)($exp.getJavaName() >> 8);
					sliceBuffer[updatePosition++] = (byte)($exp.getJavaName());
#elseif ($exp.isTypeFloat())
#elseif ($exp.isTypeBool())
#elseif ($exp.isTypeString())
#end			
				}
				input_changed_$exp.getJavaName() = false;
			}
			else
			{
				$exp.getJavaName()_state = 2; //N/A state
				sliceBuffer[updatePosition++] = 2;
			}
#else
			if (selectLevel == 0) //expression with constant only will be at level 0
			{
				$exp.getJavaName() = $exp.getRoot().generateCode();
				$exp.getJavaName()_state = 0; //ok state
				sliceBuffer[updatePosition++] = 0;
#if ($exp.isTypeInt())
				sliceBuffer[updatePosition++] = (byte)($exp.getJavaName() >> 24);
				sliceBuffer[updatePosition++] = (byte)($exp.getJavaName() >> 16);
				sliceBuffer[updatePosition++] = (byte)($exp.getJavaName() >> 8);
				sliceBuffer[updatePosition++] = (byte)($exp.getJavaName());
#elseif ($exp.isTypeFloat())
#elseif ($exp.isTypeBool())
#elseif ($exp.isTypeString())
#end			
			}
			else
			{
				$exp.getJavaName()_state = 2; //N/A state
				sliceBuffer[updatePosition++] = 2;
			}
#end		
#end 
#end
			//for (int i=0;i<updatePosition;i++) System.out.print(sliceBuffer[i]+" ");
			//System.out.println();
			slicePosition = outPool.writeSlice(sliceBuffer,updatePosition);
			while (slicePosition == -1)
			{
				//try{outPool.wait();}catch (InterruptedException e) {e.printStackTrace();}
				slicePosition = outPool.writeSlice(sliceBuffer,updatePosition);
			}
		
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
#set ($symbol=$exp.getSymbols().get(0))	
			if ($exp.getJavaName()_state == 3) //the first slice of scope
			{
				$symbol.getJavaName()_slice_marker = slicePosition;
				$exp.getJavaName()_state = 2;
			}
#end
#end
			selectLevel = fetchLevel;
#if ($query.getFilter())	
		} 
		else 
		{
			if(selectLevel > fetchLevel) selectLevel = fetchLevel;
		}
#end	
		}//if
	}//while
	
#foreach ($exp in $query.getSelectExpressions())
#if ($exp.getWithin())
#set ($symbol=$exp.getSymbols().get(0))		
		if ($symbol.getJavaName()_slice_marker >=0 )
		{
#if ($exp.isTypeInt())		
			outPool.updateIntAggValue($symbol.getJavaName()_slice_marker,$symbol.getJavaName()_field_marker,$symbol.getJavaName()_$exp.getRoot().hashCode()); //update int aggval
			$symbol.getJavaName()_$exp.getRoot().hashCode() = 0;
#elseif ($exp.isTypeFloat())
#end
		}
#end
#end
	outPool.endPool();
	System.out.println("END EXECUTOR");
}//run
};

Thread tabletReader = new Thread(TabletReader);
Thread tabletWriter = new Thread(TabletWriter);
Thread queryExecutor = new Thread(QueryExecutor);

//tabletReader.setPriority(Thread.MAX_PRIORITY);
//tabletWriter.setPriority(Thread.MAX_PRIORITY);
//queryExecutor.setPriority(Thread.MIN_PRIORITY);

tabletReader.start();
tabletWriter.start();
queryExecutor.start();

//wait for all thread terminated
while (tabletReader.isAlive() || tabletWriter.isAlive() || queryExecutor.isAlive()){}
System.out.println("Time:"+(System.currentTimeMillis()-startTime));
